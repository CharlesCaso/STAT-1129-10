{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a8738f74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "n = 0\n",
    "while n <5:\n",
    "    print(n)\n",
    "    n += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "83419e0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5 is not less than 5\n"
     ]
    }
   ],
   "source": [
    "n=0\n",
    "while n < 5:\n",
    "    print(n)\n",
    "    n += 1\n",
    "else:\n",
    "    print(n, \"is not less than 5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "65647864",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I like oranges\n",
      "I like pineapples\n",
      "I like grapes\n",
      "I like watermelons\n",
      "Are apples really fruits?\n"
     ]
    }
   ],
   "source": [
    "fruitlist = [\"oranges\", \"pineapples\", \"grapes\", \"watermelons\", \"apples\"]\n",
    "for fruit in fruitlist:\n",
    "    if fruit == \"apples\":\n",
    "        print(\"Are\", fruit, \"really fruits?\")\n",
    "        break\n",
    "    else:\n",
    "        print(\"I like\", fruit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4a763bca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum =  465\n"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "for number in range (31):\n",
    "    total = total + number\n",
    "print (\"Sum = \", total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "8426f837",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When its sunny let us play\n",
      "When its rainy let us watch TV\n",
      "When its cloudy let us walk\n"
     ]
    }
   ],
   "source": [
    "weather = {\"sunny\": \"play\", \"rainy\": \"watch TV\", \"cloudy\": \"walk\"}\n",
    "for forecast, activity in weather.items():\n",
    "    print(\"When its\", forecast, \"let us\", activity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1dda7f4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When its sunny let us play\n",
      "When its rainy let us watch TV\n",
      "When its cloudy let us walk\n",
      "When its snowy let us ski\n"
     ]
    }
   ],
   "source": [
    "weather.update({\"snowy\": \"ski\"})\n",
    "for forecast, activity in weather.items():\n",
    "    print(\"When its\", forecast, \"let us\", activity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "3a0189e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When its sunny let us play\n",
      "When its rainy let us watch TV\n",
      "When its cloudy let us walk\n",
      "When its snowy let us ski\n"
     ]
    }
   ],
   "source": [
    "for forecast, activity in weather.items():\n",
    "    if forecast:\n",
    "        print (\"When its\", forecast, \"let us\", activity)\n",
    "    else:\n",
    "       print (\"\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "4ce26963",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the grade: 80\n",
      "B\n"
     ]
    }
   ],
   "source": [
    "grade = input (\"Enter the grade: \")\n",
    "\n",
    "if int(grade) >= 90:\n",
    "    print(\"A\")\n",
    "elif int(grade) >= 80 and int(grade) <90:\n",
    "    print(\"B\")\n",
    "elif int(grade) >= 70 and int(grade) <80:\n",
    "    print(\"C\")\n",
    "elif int(grade) >= 60 and int(grade) <70:\n",
    "    print(\"D\")\n",
    "else:\n",
    "    print(\"F\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
