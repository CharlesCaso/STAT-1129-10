import cv2
import numpy as np
import sys 
import random #to generate a random game condition for the bot

#Capturing Webcam Frame

cam = cv2.VideoCapture(0)

cv2.namedWindow("Player_Selection")

while True:
    ret, frame = cam.read()
    cv2.imshow("Player_Selection", frame)

    k = cv2.waitKey(1)
    if k%256 == 32:# SPACE pressed
        img_name = "player_choice.png"
        cv2.imwrite(img_name, frame)
        print("Player Selection Was Captured")
        break

cam.release()

cv2.destroyWindow("Player_Selection")
cv2.waitKey(1)

#Image Processing

img = cv2.imread("player_choice.png")

#cv2.namedWindow("Player Hand Original")
cv2.namedWindow("thresh")
#cv2.namedWindow("contours")
#cv2.namedWindow("hull")
cv2.namedWindow("final_output")

HSV_image = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
lower = np.array([0, 30, 50], dtype = "uint8") #original 0, 48, 80, try 30, 60
upper = np.array([20, 255, 255], dtype = "uint8")#original 20, 255, 255
skinRegionHSV = cv2.inRange(HSV_image, lower, upper)
blurred = cv2.blur(skinRegionHSV, (15,15)) # original 2, 2 try also 20, 20 also 50 50 
ret,thresh = cv2.threshold(blurred,0,255,cv2.THRESH_BINARY)
cv2.imshow("thresh", thresh)


#cv2.imshow("Player Hand Captured", img)

_, contours, _= cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contours = max(contours, key=lambda x: cv2.contourArea(x))
cv2.drawContours(img, [contours], -1, (255,255,0), 2)
#cv2.imshow("contours", img)

hull = cv2.convexHull(contours)
cv2.drawContours(img, [hull], -1, (0, 255, 255), 2)
#cv2.imshow("hull", img)

hull = cv2.convexHull(contours, returnPoints=False)
defects = cv2.convexityDefects(contours, hull)

if defects is not None:
    cnt = 0
for i in range(defects.shape[0]):  # calculate the angle
    s, e, f, d = defects[i][0]
    start = tuple(contours[s][0])
    end = tuple(contours[e][0])
    far = tuple(contours[f][0])
    a = np.sqrt((end[0] - start[0]) ** 2 + (end[1] - start[1]) ** 2)
    b = np.sqrt((far[0] - start[0]) ** 2 + (far[1] - start[1]) ** 2)
    c = np.sqrt((end[0] - far[0]) ** 2 + (end[1] - far[1]) ** 2)
    angle = np.arccos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))  # cosine theorem
    if angle <= np.pi / 2:  # angle less than 90 degree, treat as fingers
        cnt += 1
        cv2.circle(img, far, 4, [0, 0, 255], -1)
if cnt > 0:
    cnt = cnt+1

cv2.imshow("final_output", img)

cv2.waitKey(0) # close window when a key press is detected
#cv2.destroyWindow('Player Hand Captured')
cv2.destroyWindow('thresh')
#cv2.destroyWindow('contours')
#cv2.destroyWindow('hull')
cv2.destroyWindow("final_output")

cv2.waitKey(1) #this additional line is needed to close windows on macOS/linux

#ROCK PAPER SCISSORS GAME

if cnt == 0: #number of fingers held up (cnt) corresponds to game conditions
    player_choice = 1
    print("\nYou Played: Rock")
elif cnt == 5:
    player_choice = 2
    print("\nYou Played: Paper")
elif cnt == 2:
    player_choice = 3
    print("\nYou Played: Scissors")
else:
    print("\nHand gesture is invalid, please choose (rock, paper or scissors)")
    sys.exit()

for n in range (1): #Number in () is the number of random numbers generated, in this case only 1
    player_bot = random.randint(1,3) #generates a random integer [1, 2, or 3]

if player_bot == 1: #Random number corresponds to one of the game conditions
    print("\nThe Computer Chooses: Rock")
elif player_bot == 2:
    print("\nThe Computer Chooses: Paper")
elif player_bot == 3:
    print("\nThe Computer Chooses: Scissors")
    
if player_choice == player_bot:
    print ("\nIt's a tie! Play again?")
elif player_choice == 1 and player_bot == 3:
    print ("\nYou win! Play again?")
elif player_choice < player_bot: #Rock is 1, loses to paper: 2, and paper is 2 which loses to scissors: 3
    print ("\nThe Computer Wins! Better Luck Next Time!")
elif player_choice == 3 and player_bot == 1:
    print ("\nThe Computer Wins! Better Luck Next Time!")
elif player_choice > player_bot: #Scissors is 3, wins against paper: 2, and paper: 2 wins against rock: 1
    print ("\nYou win! Play again?")
