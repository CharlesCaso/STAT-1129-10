# Question 1

list1 = [2,4,6,8,4,5,2,1,9,0,4,6,7,4,3,2,1,9,10,3,7,9,6,0,1,3,5,6,7,8,9,10,2,3,6,8,9,10,6,7,4,3]

set_list1 = set(list1) #Set with each unique value from list1
minimum = min(list1)
listdic = {}

print("Input : \n", list1)
print("\n")
print("Output: ")

for n in set_list1: #Count the number of repeated values from list1 corresponding to each unique value
    print(n, ":", list1.count(n))
    num = n
    unique_num = list1.count(n)
    listdic[num] = unique_numa

print("\n")
for i in listdic:
    if i == minimum:
        print("Explaination : \nHere", i, "occurs", listdic[i], "times, " , end="")
    elif i == minimum + 1 :
        print (i, "occurs", listdic[i], "times and so on...")
    else:
        break
    
# Plot Histogram

import matplotlib.pyplot as plt
import numpy as np

datapoints = len(set_list1)
plt.hist(list1, datapoints)
plt.title("Histogram")
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.show()

# Store this dictionary results into json file and store in your local computer.

import json
import os

cwd = os.getcwd()
os.chdir("/Users/CharlesCaso/Downloads")

f = open("DictionaryOutput.json", "w")
json.dump(listdic, f, indent = 4)
f.close()

f = open("DictionaryOutput.json", "r")
f.read()
    
#Question 2

print("Question 2: Amazon Purchase History (2020)")

import pandas as pd
import os
import numpy as np

os.chdir("/users/CharlesCaso/Downloads") #Locating Directory with Amazon Purchase History data
df = pd.read_csv("MidtermData.csv") 

df["Item Total"] = df["Item Total"].str.replace('$','').astype(float) #Converting the data from string to float
# Also removed the $ before each of the values

print("Sum of all items purchased in 2020: ${:.2f}".format(df["Item Total"].sum())) 
print("Average purchase price of all items in 2020: ${:.2f}".format(df["Item Total"].mean())) 
print("Most expensive item purchased in 2020: ${:.2f}\n".format(df["Item Total"].max()))

#Find what dates these purchases are from

df["Order Date"] = pd.to_datetime(df["Order Date"]) # Convert to datetime for the computer to recognize them

daily_orders = df.groupby("Order Date").sum()["Item Total"] #df.groupby adds the item totals for orders on the same day
daily_orders.plot.bar(title = "Amazon Purchase Amounts in 2020" ,ylabel = "Item Total", xlabel = "Day", figsize = (40,10))
#Order date on the x axis and Item Total on the y axis, and the figsize adjusts the scaling

#Find monthy payment and graph information in a pie chart and line chart

df["Order Date"] = pd.to_datetime(df["Order Date"])
df["Order Date"] = df["Order Date"].dt.strftime('%Y-%m') # only inclide year and month in the "Order Date" column

monthly_orders = df.groupby("Order Date").sum()["Item Total"] # sum of item totals grouped by month

monthly_orders.plot.pie(title = "Amazon Purchase Amounts in 2020" , figsize = (40,10), autopct='%1.0f%%')
# graph monthly purchase totals as a pie chart

import matplotlib.pyplot as plt

plt.xticks([0, 1, 2, 3 ,4 ,5 ,6 ,7 ,8, 9, 10, 11], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], rotation=20)
#Label the x-axis

monthly_orders.plot.bar(title = "Amazon Purchase Amounts in 2020" , ylabel = "Item Totals", figsize = (30,10))
# Plots a bar chart 



